use super::{
    channel_id::{GetChannelID, SetChannelID},
    clear_errors::ClearErrors,
    clock_source::{GetClockSource, SetClockSource},
    frequency::{GetFrequency, SetFrequency},
    identity::GetIdentity,
    iq_magnitude::{GetQIMagPercent, SetQIMagPercent},
    isc_power::SetISCPowerOutput,
    pa_power::{
        GetPAPowerDBM, GetPAPowerSetpointDBM, GetPAPowerSetpointWatt, GetPAPowerWatt,
        SetPAPowerSetpointDBM, SetPAPowerSetpointWatt,
    },
    pa_temp::GetPATemp,
    phase::{GetPhase, SetPhase},
    rf_output::{GetRFOutput, SetRFOutput},
    status::GetStatus,
    system_reset::ResetSystem,
    uptime::GetUptime,
    version::GetVersion,
    vga_attenuation::GetVGAAttenuationDB,
};
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]
pub enum Command {
    GetIdentity(GetIdentity),
    GetUptime(GetUptime),
    GetVersion(GetVersion),
    GetStatus(GetStatus),
    ClearErrors(ClearErrors),
    SetChannelID(SetChannelID),
    GetChannelID(GetChannelID),
    SetClockSource(SetClockSource),
    GetClockSource(GetClockSource),
    ResetSystem(ResetSystem),
    GetRFOutput(GetRFOutput),
    SetRFOutput(SetRFOutput),
    GetFrequency(GetFrequency),
    SetFrequency(SetFrequency),
    GetPhase(GetPhase),
    SetPhase(SetPhase),
    GetPATemp(GetPATemp),
    GetVGAAttenuationDB(GetVGAAttenuationDB),
    GetQIMagPercent(GetQIMagPercent),
    SetQIMagPercent(SetQIMagPercent),
    SetISCPowerOutput(SetISCPowerOutput),
    GetPAPowerWatt(GetPAPowerWatt),
    GetPAPowerDBM(GetPAPowerDBM),
    SetPAPowerSetpointWatt(SetPAPowerSetpointWatt),
    GetPAPowerSetpointWatt(GetPAPowerSetpointWatt),
    SetPAPowerSetpointDBM(SetPAPowerSetpointDBM),
    GetPAPowerSetpointDBM(GetPAPowerSetpointDBM),
}

// GetFrequency,
//     SetFrequency(f32),
//     GetPaPower,
//     GetPowerSetpoint,
//     SetPower(f32),
//     ConfigureDll {
//         param1: f32,
//         param2: f32,
//         param3: f32,
//         param4: f32,
//         param5: f32,
//         param6: f32,
//     },
//     DllEnable,
//     DllDisable,
//     RfEnable,
//     RfDisable,
//     SweepDbm {
//         start: f32,
//         stop: f32,
//         step: f32,
//         power: f32,
//     },
//     GetTemperature,
